#
# Do not run directly!
# It is sourced by each board's subdirectory
#

base_dir = $(abspath ..)

output_dir = $(base_dir)/$(BOARD_NAME)/output

boot_build_dir = $(output_dir)/boot

final_output_dir = $(output_dir)/final

default: $(BOARD_NAME)


#
# ----------------------------------------------------------
# Bitstream / boot image
# ----------------------------------------------------------
# Parallella: Binary bitstream image (no board flash needed)
# ZedBoard  : Full boot image (FSBL + bitstream + U-Boot)
# ----------------------------------------------------------
#

parallella_bitstream = $(final_output_dir)/parallella.bit.bin
$(parallella_bitstream): bitstream
	# Make final Parallella bitstream image (bin instead of bit)
	cd $(boot_build_dir) && \
	bootgen -image bit2bin.bif -w on -split bin && \
	rm bit2bin.bin && \
	cp parallella.bit.bin $(final_output_dir)/
parallella_bitstream: $(parallella_bitstream)

zedboard_bitstream = $(final_output_dir)/boot.bin
$(zedboard_bitstream): bitstream
	# Make final ZedBoard boot image (FSBL + bitstream + U-Boot)
	cd $(boot_build_dir) && \
	bootgen -image boot.bif -w on -o boot.bin && \
	cp boot.bin $(final_output_dir)/
zedboard_bitstream: $(zedboard_bitstream)


#
# -------------------------------------------
# IP, System Project and Bitstream Generation
# -------------------------------------------
#

RocketCoreIPName = "RISCV_Rocket_Core_RV64_1.0"
RocketCoreIPDir = $(base_dir)/ip/$(RocketCoreIPName)/src
fpga_dir = $(base_dir)/$(BOARD_NAME)/fpga

bitstream = $(fpga_dir)/$(BOARD_NAME).bit
$(bitstream): $(BOARD_NAME)_ip_deps $(fpga_dir)/system_params.tcl
	sed -i "s/^\(set scripts_vivado_version \)[0-9]\{4\}\.[0-9]/\1${VIVADO_VERSION}/" $(fpga_dir)/system_bd.tcl
	cd $(fpga_dir) && \
	rm -rf $(BOARD_NAME)_riscv && \
	export BOARD_DEVICE=$(BOARD_DEVICE) && \
	export BOARD_PART=$(BOARD_PART) && \
	export RISCV_CORE_ARCH=$(RISCV_CORE_ARCH) && \
	vivado -mode tcl -source $(fpga_dir)/system_bitstream.tcl && \
	cp ./$(BOARD_NAME)_riscv/system.runs/impl_1/system_wrapper.bit $(fpga_dir)/$(BOARD_NAME).bit
	cd $(boot_build_dir) && \
	ln -sf $(fpga_dir)/$(BOARD_NAME).bit .
bitstream: $(bitstream)

system_project = $(fpga_dir)/$(BOARD_NAME)_riscv/system.xpr
$(system_project): $(BOARD_NAME)_ip_deps $(fpga_dir)/system_params.tcl
	sed -i "s/^\(set scripts_vivado_version \)[0-9]\{4\}\.[0-9]/\1${VIVADO_VERSION}/" $(fpga_dir)/system_bd.tcl
	cd $(fpga_dir) && \
	rm -rf $(BOARD_NAME)_riscv && \
	export BOARD_DEVICE=$(BOARD_DEVICE) && \
	export BOARD_PART=$(BOARD_PART) && \
	export RISCV_CORE_ARCH=$(RISCV_CORE_ARCH) && \
	vivado -mode tcl -source $(fpga_dir)/system_project.tcl
system_project: $(system_project)

parallella_ip_deps: parallella_ip_package riscv_ip_setup riscv_ip_package
zedboard_ip_deps: riscv_ip_setup riscv_ip_package

parallella_ip_package = $(fpga_dir)/parallella_base/parallella_base.xpr
$(parallella_ip_package): $(fpga_dir)/ip_params_parallella.tcl
	${SCRIPTS}/setup.parallella.oh.submodule.sh
	cd $(fpga_dir) && \
	rm -rf parallella_base && \
	export BOARD_DEVICE=$(BOARD_DEVICE) && \
	export BOARD_PART=$(BOARD_PART) && \
	export RISCV_CORE_ARCH=$(RISCV_CORE_ARCH) && \
	vivado -mode tcl -source $(fpga_dir)/ip_package_parallella.tcl
parallella_ip_package: $(parallella_ip_package)

riscv_ip_package = $(fpga_dir)/riscv_rv64g/riscv_rv64g.xpr
$(riscv_ip_package): $(fpga_dir)/ip_params_riscv.tcl
	cd $(fpga_dir) && \
	rm -rf riscv_rv64 && \
	export BOARD_DEVICE=$(BOARD_DEVICE) && \
	export BOARD_PART=$(BOARD_PART) && \
	export RISCV_CORE_ARCH=$(RISCV_CORE_ARCH) && \
	vivado -mode tcl -source $(fpga_dir)/ip_package_riscv.tcl
riscv_ip_package: $(riscv_ip_package)

riscv_ip_setup:
	sed -i "s/^\(\`define RISCV_CORE_ARCH_\)[a-zA-Z0-9]*/\1$(RISCV_CORE_ARCH)/" $(RocketCoreIPDir)/settings.vh
	sed -i "s/^\(\`define RISCV_DRAM_BASE\) [0-9]\'d[0-9]/\1 $(RISCV_DRAM_BASE_RTL)/" $(RocketCoreIPDir)/settings.vh
	sed -i "s/^\(\`define RISCV_DRAM_BITS\) [0-9]\{2\}/\1 $(RISCV_DRAM_BITS_RTL)/" $(RocketCoreIPDir)/settings.vh
	sed -i "s/^\(\`include \"\)[a-zA-Z0-9]*\(\.Core\.vh\"\)/\1$(RISCV_CORE_ARCH)\2/" $(RocketCoreIPDir)/RV64.Core.v


#
# ----------------------------
# Platform software generation
# ----------------------------
#

arm_linux_dir = $(base_dir)/boot/$(LINUX_REPO)

uboot_dir = $(base_dir)/boot/$(UBOOT_REPO)

dtc_dir = $(base_dir)/boot/dtc

dtb_dir = $(arm_linux_dir)/arch/arm/boot/dts

dts_dir = $(base_dir)/$(BOARD_NAME)/dts


# Unset LD_LIBRARY_PATH that points to Xilinx libraries (from sourcing setting64.sh)
# in order to not break various commandline tools that are used during building (e.g awk)
export LD_LIBRARY_PATH=

$(BOARD_NAME)_software: arm-uboot-$(BOARD_NAME) arm-linux arm-dtb

arm-linux: arm-uboot-$(BOARD_NAME) # Must first build uboot because we need its tools
	# Compile kernel
	git submodule update --init $(arm_linux_dir)
	# No make clean included here since one copy of linux should work on all boards
	# Configure Linux kernel
	cd $(arm_linux_dir) && \
	make ARCH=arm CROSS_COMPILE=arm-xilinx-linux-gnueabi- $(LINUX_CONFIG)_defconfig
	# Build Linux kernel
	cd $(arm_linux_dir) && \
	make ARCH=arm CROSS_COMPILE=arm-xilinx-linux-gnueabi- -j${JOBS}
	# Convert zImage to uImage
	cd $(arm_linux_dir) && \
	export PATH=$(uboot_dir)/tools:$$PATH && \
	make ARCH=arm CROSS_COMPILE=arm-xilinx-linux-gnueabi- UIMAGE_LOADADDR=0x8000 uImage
	mkdir -p $(final_output_dir)
	cp $(arm_linux_dir)/arch/arm/boot/uImage $(final_output_dir)/

arm-uboot-parallella: arm-uboot
arm-uboot-zedboard: arm-dtc arm-uboot # We need dtc to build ZedBoard's U-Boot from upstream u-boot-xlnx repo

arm-uboot:
	# Compile board-compatible u-boot
	git submodule update --init $(uboot_dir)
	# Copy relevant configuration files
	cp uboot/$(UBOOT_CONFIG).h $(uboot_dir)/include/configs/
	# Configure U-Boot
	cd $(uboot_dir) && \
	make CROSS_COMPILE=arm-xilinx-linux-gnueabi- $(UBOOT_CONFIG)_defconfig
	# Build U-Boot
	export PATH=$(dtc_dir):$$PATH && \
	cd $(uboot_dir) && make CROSS_COMPILE=arm-xilinx-linux-gnueabi- -j${JOBS}
	mkdir -p $(boot_build_dir)
	cp $(uboot_dir)/u-boot $(boot_build_dir)/u-boot.elf

arm-dtc:
	# Compile device tree compiler (needed by upstream U-Boot for ZedBoard)
	git submodule update --init $(dtc_dir)
	cd $(dtc_dir) && make -j${JOBS}

arm-dtb:
	sed -i "s/^\(#define RISCV_DRAM_BASE\) 0x[0-9A-Fa-f]\{8\}/\1 $(RISCV_DRAM_BASE_DTS)/" $(dts_dir)/settings.h
	sed -i "s/^\(#define RISCV_DRAM_SIZE\) 0x[0-9A-Fa-f]\{8\}/\1 $(RISCV_DRAM_SIZE_DTS)/" $(dts_dir)/settings.h
	cp $(dts_dir)/settings.h $(dtb_dir)
	cp $(dts_dir)/$(LINUX_DTS).dts* $(dtb_dir)
	cd $(arm_linux_dir) && \
	make ARCH=arm CROSS_COMPILE=arm-xilinx-linux-gnueabi- $(LINUX_DTB).dtb
	cp $(dtb_dir)/$(LINUX_DTB).dtb $(final_output_dir)/devicetree.dtb

# Instead of using the above you can use the following to build locally (not in Linux repo)
# if you don't want to init its huge repo just for a device tree build. This will of-course
# use the local dts that may be out of date and also needs the dtc repo as the ZedBoard U-Boot target.
arm-dtb-local: arm-dtc
	export PATH=$(arm_linux_dir)/scripts/dtc:$$PATH && \
	dtc -I dts -O dtb -o $(final_output_dir)/devicetree.dtb $(dts_dir)/$(LINUX_DTB).dts


#
# ---------------------------------
# RISC-V Rocket Cores and Toolchain
# ---------------------------------
#

riscv_emulator:
	${SCRIPTS}/setup.rocketchip.submodule.sh
	# Build the Rocket Chip emulator
	cd ${ROCKETCHIP}/emulator && \
	make -j${JOBS}

riscv_rocketcore:
	${SCRIPTS}/setup.rocketchip.submodule.sh
	cp ${TOP}/ip/config/Rocket.Core.Configs.scala ${ROCKETCHIP}/src/main/scala/Configs.scala
	# Build the Rocket Chip Verilog RTL (for FPGAs)
	cd ${ROCKETCHIP}/fsim && \
	make verilog CONFIG=$(RISCV_CORE_CONFIG) && \
	make verilog MODEL=ZynqAdapter CONFIG=$(RISCV_CORE_CONFIG) && \
	cp generated-src/Top.$(RISCV_CORE_CONFIG).v $(RocketCoreIPDir)/$(RISCV_CORE_ARCH).Core.vh && \
	cp generated-src/ZynqAdapter.$(RISCV_CORE_CONFIG).v $(RocketCoreIPDir)/RV64.HostIO.Adapter.v && \
	sed -i "s/^\(module\) Top(/\1 Rocket_Core_$(RISCV_CORE_ARCH)(/" $(RocketCoreIPDir)/$(RISCV_CORE_ARCH).Core.vh

riscv_toolchain:
	${SCRIPTS}/setup.rocketchip.submodule.sh
	# Install necessary packages (Ubuntu)
	-lsb_release -d | grep -i ubuntu && \
	sudo apt-get install autoconf automake autotools-dev curl \
	libmpc-dev libmpfr-dev libgmp-dev gawk build-essential bison flex \
	texinfo gperf libtool patchutils bc
	# Install necessary packages (OpenSUSE)
	-lsb_release -d | grep -i suse && \
	sudo zypper install autoconf automake autotools-dev curl \
	mpc-devel mpfr-devel gmp-devel gawk bison flex \
	texinfo gperf libtool patchutils bc
	-lsb_release -d | grep -i suse && sudo zypper -t pattern devel_basis
	# Switch to the master (priv1.7 ISA) branch and setup build script
	cd ${RISCVTOOLS} && \
	git checkout -B current && \
	git checkout master && \
	git submodule update --init --recursive
	sed -i "s/^\(build_project riscv-gnu-toolchain --prefix=\$$RISCV\)\( --with-arch=RV64[A-Z]\{1,5\}\)\{0,1\}/\1 --with-arch=$(RISCV_CORE_ARCH)/" ${RISCVTOOLS}/build.sh
	sed -i "s/^\(build_project riscv-tests\)/#\1/" ${RISCVTOOLS}/build.sh
	# Build the RISC-V Toolchain
	# (First Newlib version for use without an OS, then the Linux version with glibc)
	cd ${RISCVTOOLS} && \
	export MAKEFLAGS=-j${JOBS} && \
	./build.sh && \
	cd riscv-gnu-toolchain && \
	./configure --prefix=${RISCV} && \
	make linux && \
	cd ${RISCVTOOLS} && \
	git checkout current && \
	git checkout -- build.sh && \
	git submodule update --init --recursive


#
# -----------------------------
# RISC-V Software, Linux Kernel
# -----------------------------
#

riscv_software: riscv_baremetal riscv_linux

riscv_baremetal: riscv_fesvr riscv_pk riscv_hello

riscv_fesvr:
	${SCRIPTS}/setup.rocketchip.submodule.sh
	# Build the RISC-V frontend server (fesvr) for Zynq's ARM with Xilinx Linaro toolchain (hardfloat)
	# Note: the normal Xilinx Codesourcery toolchain doesn't produce a working fesvr
	cd ${RISCVTOOLS}/riscv-fesvr && \
	mkdir -p build.arm && cd build.arm && \
	../configure --host=arm-linux-gnueabihf && \
	make && \
	cp fesvr-zedboard $(final_output_dir)/riscv/fesvr && \
	cp libfesvr.so $(final_output_dir)/riscv/ && \
	cd ${RISCVTOOLS}/riscv-fesvr && \
	rm -rf build.arm

riscv_pk:
	cd ${RISCV}/riscv64-unknown-elf/bin/ && \
	chmod 755 pk && cp pk $(final_output_dir)/riscv/

riscv_hello:
	cd $(base_dir)/examples/hello/ && \
	CFLAGS="-march=$(RISCV_CORE_ARCH)" riscv64-unknown-elf-gcc -o hello hello.c && \
	cp hello $(final_output_dir)/riscv/

RISCVLinuxVersion = 4.1.17

riscv_linux: riscv_fesvr riscv_bbl riscv_kernel

riscv_bbl:
	cd ${RISCV}/riscv64-unknown-elf/bin/ && \
	chmod 755 bbl && cp bbl $(final_output_dir)/riscv/

riscv_kernel:
	git submodule update --init  -- ${BOOT}/riscv-linux
	cd ${BOOT} && \
	curl -L https://cdn.kernel.org/pub/linux/kernel/v4.x/linux-$(RISCVLinuxVersion).tar.xz | tar -xJkf - && \
	rsync -a --ignore-existing linux-$(RISCVLinuxVersion)/ riscv-linux/ && \
	rm -rf linux-$(RISCVLinuxVersion) && \
	cd riscv-linux && \
	sed -i "s/^\(CONFIG_CMDLINE=\"root=\/dev\/htifblk0\)\"/\1 mem=$(RISCV_DRAM_SIZE_LINUX)\"/" arch/riscv/configs/riscv64_spike && \
	make ARCH=riscv defconfig && \
	make -j${JOBS} ARCH=riscv vmlinux && \
	cp vmlinux $(final_output_dir)/riscv/

#
# ---------------------
# Handle ramdisk images
# ---------------------
#

ramdisk-open:
	mkdir ramdisk
	dd if=$(output_delivery)/uramdisk.image.gz  bs=64 skip=1 | \
	gunzip -c | sudo sh -c 'cd ramdisk/ && cpio -i'

ramdisk-close: arm-uboot # must first build uboot because we need tools
	@if [ ! -d "ramdisk" ]; then \
		echo "No ramdisk to close (use make ramdisk-open first)"; \
		exit 1; \
	fi
	sh -c 'cd ramdisk/ && sudo find . | sudo cpio -H newc -o' | gzip -9 > uramdisk.cpio.gz
	mkimage -A arm -O linux -T ramdisk -d uramdisk.cpio.gz $(output_delivery)/uramdisk.image.gz
	rm uramdisk.cpio.gz
	@echo "Don't forget to remove ramdisk before opening it again (sudo rm -rf ramdisk)"

clean:

.PHONY: clean
